devtools::install
devtools::build()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::build()
devtools::build()
devtools::build()
devtools::install()
example(uzawa.algorithm)
library(uzawa.algorithm)
example(uzawa.algorithm)
library(uzawa.algorithm)
A <- matrix(c(1, 2, 3, 4), nrow = 2)
A
b <- c(5, 6)
b
C <- matrix(c(1, 1), nrow = 1)
C
d <- 1
d
x0 <- c(0, 0)
x0
rho <- 1
rho
alpha <- 0.1
alpha
max_iter <- 1000
max_iter
tol <- 1e-6
tol
t <-  initialize_uzawa(A, b, C, d, x0, rho, alpha, max_iter, tol)
y0 <- c(0,0)
y0
t <-  initialize_uzawa(A, b, C, d, x0, rho, alpha, max_iter, tol)
A <- matrix(c(1, 2, 3, 4), nrow = 2)
A
b <- c(5, 6)
b
C <- matrix(c(1, 1), nrow = 1)
C
d <- 1
d
x0 <- c(0, 0)
x0
rho <- 1
rho
alpha <- 0.1
alpha
max_iter <- 1000
max_iter
tol <- 1e-6
tol
y <- rep(0, ncol(C))
y
t <-  initialize_uzawa(A, b, C, d, x0, rho, alpha, max_iter, tol)
A <- matrix(c(1, 2, 3, 4), nrow = 2)
A
b <- c(5, 6)
b
C <- matrix(c(1, 1), nrow = 1)
C
d <- 1
d
x0 <- c(0, 0)
x0
rho <- 1
rho
alpha <- 0.1
alpha
max_iter <- 1000
max_iter
tol <- 1e-6
tol
y <- c(0,0)
y
t <-  initialize_uzawa(A, b, C, d, x0, rho, alpha, max_iter, tol)
library(uzawa.algorithm)
# Define the matrix A
A <- matrix(c(1, 2, 3, 4), nrow = 2)
A
# Define the vector b
b <- c(5, 6)
b
# Define the transpose of the matrix B
C <- matrix(c(1, 1), nrow = 1)
C
# Define the vector d
d <- 1
d
# Define the initial guess for the solution vector x
x0 <- c(0, 0)
x0
y0 <- c(0)
y0
# Define the penalty parameter
rho <- 1
rho
# Define the step size
alpha <- 0.1
alpha
# Define the maximum number of iterations
max_iter <- 1000
# Define the tolerance for convergence
tol <- 1e-6
# Solve the saddle point problem using the Uzawa algorithm
x <- uzawa_algorithm(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
# Solve the saddle point problem using the Uzawa algorithm
x <- uzawa_algorithm(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
# Solve the saddle point problem using the Uzawa algorithm
x <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
x
# Solve the saddle point problem using the Uzawa algorithm
x <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
# Define the matrix A
A <- matrix(c(1, 2, 3, 4), nrow = 2)
A
# Define the vector b
b <- c(5, 6)
b
# Define the transpose of the matrix B
C <- matrix(c(1, 1), nrow = 1)
C
# Define the vector d
d <- 1
d
# Define the initial guess for the solution vector x
x0 <- c(0, 0)
x0
y0 <- c(0,0)
y0
# Define the penalty parameter
rho <- 1
rho
# Define the step size
alpha <- 0.1
alpha
# Define the maximum number of iterations
max_iter <- 1000
# Define the tolerance for convergence
tol <- 1e-6
# Solve the saddle point problem using the Uzawa algorithm
x <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
y0 <- c(0)
y0
# Define the penalty parameter
rho <- 1
rho
# Define the step size
alpha <- 0.1
alpha
# Define the maximum number of iterations
max_iter <- 1000
# Define the tolerance for convergence
tol <- 1e-6
# Solve the saddle point problem using the Uzawa algorithm
x <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
x
# Define the transpose of the matrix B
C <- matrix(c(1, 1), nrow = 2)
# Solve the saddle point problem using the Uzawa algorithm
x <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
# Solve the saddle point problem using the Uzawa algorithm
u <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
y0 <- c(0)
# Solve the saddle point problem using the Uzawa algorithm
u <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
# Define the transpose of the matrix B
C <- matrix(c(1, 1), nrow = 1)
u <- uzawa_algorithm(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
# Solve the saddle point problem using the Uzawa algorithm
u <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
y0 <- c(0, ncol=1)
y0
# Solve the saddle point problem using the Uzawa algorithm
u <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
y0 <- c(0)
y0
# Solve the saddle point problem using the Uzawa algorithm
u <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
devtools::load_all(".")
devtools::load_all(".")
devtools::build()
library(uzawa.algorithm)
# Define the matrix A
A <- matrix(c(1, 2, 3, 4), nrow = 2)
A
# Define the vector b
b <- c(5, 6)
b
# Define the transpose of the matrix B
C <- matrix(c(1, 1), nrow = 1)
C
d
# Define the initial guess for the solution vector x
x0 <- c(0, 0)
# Define the vector d
d <- 1
x0
y0 <- c(0)
y0
# Define the penalty parameter
rho <- 1
rho
# Define the step size
alpha <- 0.1
alpha
# Define the maximum number of iterations
max_iter <- 1000
# Define the tolerance for convergence
tol <- 1e-6
# Solve the saddle point problem using the Uzawa algorithm
u <- initialize_uzawa(A, b, C, d, x0, y0, rho, alpha, max_iter, tol)
x
u
# Plot the results
plot_results(x, C %*% x - d)
x <- 10
x
# Plot the results
plot_results(x, C %*% x - d)
x <- c(10)
x
# Plot the results
plot_results(x, C %*% x - d)
x <- c(10,10)
x
# Plot the results
plot_results(x, C %*% x - d)
y <- c(2,3)
y
# Plot the results
plot_results(x, C %*% x - d)
y <- 3
y
# Plot the results
plot_results(x, C %*% x - d)
# Plot the results
plot_results()
# Plot the results
i <- plot_results()
# Plot the results
i <- plot_results(x,y)
i
x <- c(10,10)
x
y <- 3
y
# Plot the results
i <- plot_results(x,y)
i
example(uzawa.algo)
example(uzawa.algorithm)
example(example.r)
example("example")
library(uzawa.algorithm)
example(uzawa)
example()
example(initialze_uzawa)
library(uzawa.algorithm)
example()
example(uzawa.algorithm)
example(initialize_uzawa)
